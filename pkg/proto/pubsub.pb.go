// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: pubsub.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Ping command, used to keep the websocket connection alive
//
// The state field is used to pass some non-specific information,
// which will be returned in the pong response as is.
type CmdPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State []byte `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CmdPing) Reset() {
	*x = CmdPing{}
	mi := &file_pubsub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CmdPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdPing) ProtoMessage() {}

func (x *CmdPing) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdPing.ProtoReflect.Descriptor instead.
func (*CmdPing) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{0}
}

func (x *CmdPing) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

// *
// An empty command, a placeholder for testing purposes only
type CmdEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdEmpty) Reset() {
	*x = CmdEmpty{}
	mi := &file_pubsub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CmdEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdEmpty) ProtoMessage() {}

func (x *CmdEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdEmpty.ProtoReflect.Descriptor instead.
func (*CmdEmpty) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{1}
}

// *
// Get the offset of the specified topic partition from Apache Kafka.
type CmdKafkaListOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition int32  `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CmdKafkaListOffset) Reset() {
	*x = CmdKafkaListOffset{}
	mi := &file_pubsub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CmdKafkaListOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKafkaListOffset) ProtoMessage() {}

func (x *CmdKafkaListOffset) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKafkaListOffset.ProtoReflect.Descriptor instead.
func (*CmdKafkaListOffset) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{2}
}

func (x *CmdKafkaListOffset) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CmdKafkaListOffset) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *CmdKafkaListOffset) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// *
// Fetch messages of the specified topic partition from Apache Kafka.
type CmdKafkaFetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition int32  `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset    int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *CmdKafkaFetch) Reset() {
	*x = CmdKafkaFetch{}
	mi := &file_pubsub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CmdKafkaFetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKafkaFetch) ProtoMessage() {}

func (x *CmdKafkaFetch) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKafkaFetch.ProtoReflect.Descriptor instead.
func (*CmdKafkaFetch) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{3}
}

func (x *CmdKafkaFetch) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CmdKafkaFetch) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *CmdKafkaFetch) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// *
// Client request definition for pubsub scenarios
//
// The sequence field is used to associate requests and responses.
// requests and responses, and the client can explicitly know the
// response corresponding to any of the requests.
//
// The req field is the command data sent by the client, and its
// type will be chosen from any of the lists in the definition.
//
// Field numbers 1 to 30 in the definition are used to define basic
// information and future extensions, and numbers after 30 are used
// to define commands.
type PubSubReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Types that are assignable to Req:
	//
	//	*PubSubReq_CmdEmpty
	//	*PubSubReq_CmdPing
	//	*PubSubReq_CmdKafkaFetch
	//	*PubSubReq_CmdKafkaListOffset
	Req isPubSubReq_Req `protobuf_oneof:"req"`
}

func (x *PubSubReq) Reset() {
	*x = PubSubReq{}
	mi := &file_pubsub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubReq) ProtoMessage() {}

func (x *PubSubReq) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubReq.ProtoReflect.Descriptor instead.
func (*PubSubReq) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{4}
}

func (x *PubSubReq) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (m *PubSubReq) GetReq() isPubSubReq_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (x *PubSubReq) GetCmdEmpty() *CmdEmpty {
	if x, ok := x.GetReq().(*PubSubReq_CmdEmpty); ok {
		return x.CmdEmpty
	}
	return nil
}

func (x *PubSubReq) GetCmdPing() *CmdPing {
	if x, ok := x.GetReq().(*PubSubReq_CmdPing); ok {
		return x.CmdPing
	}
	return nil
}

func (x *PubSubReq) GetCmdKafkaFetch() *CmdKafkaFetch {
	if x, ok := x.GetReq().(*PubSubReq_CmdKafkaFetch); ok {
		return x.CmdKafkaFetch
	}
	return nil
}

func (x *PubSubReq) GetCmdKafkaListOffset() *CmdKafkaListOffset {
	if x, ok := x.GetReq().(*PubSubReq_CmdKafkaListOffset); ok {
		return x.CmdKafkaListOffset
	}
	return nil
}

type isPubSubReq_Req interface {
	isPubSubReq_Req()
}

type PubSubReq_CmdEmpty struct {
	CmdEmpty *CmdEmpty `protobuf:"bytes,31,opt,name=cmd_empty,json=cmdEmpty,proto3,oneof"`
}

type PubSubReq_CmdPing struct {
	CmdPing *CmdPing `protobuf:"bytes,32,opt,name=cmd_ping,json=cmdPing,proto3,oneof"`
}

type PubSubReq_CmdKafkaFetch struct {
	CmdKafkaFetch *CmdKafkaFetch `protobuf:"bytes,33,opt,name=cmd_kafka_fetch,json=cmdKafkaFetch,proto3,oneof"`
}

type PubSubReq_CmdKafkaListOffset struct {
	CmdKafkaListOffset *CmdKafkaListOffset `protobuf:"bytes,34,opt,name=cmd_kafka_list_offset,json=cmdKafkaListOffset,proto3,oneof"`
}

func (*PubSubReq_CmdEmpty) isPubSubReq_Req() {}

func (*PubSubReq_CmdPing) isPubSubReq_Req() {}

func (*PubSubReq_CmdKafkaFetch) isPubSubReq_Req() {}

func (*PubSubReq_CmdKafkaListOffset) isPubSubReq_Req() {}

// *
// The response body of the service when an error occurs,
// containing the error code and the error message.
type ErrorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorResp) Reset() {
	*x = ErrorResp{}
	mi := &file_pubsub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResp) ProtoMessage() {}

func (x *ErrorResp) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResp.ProtoReflect.Descriptor instead.
func (*ErrorResp) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// *
// Pong response, the state field will pass through the
// value in the Ping command field.
type PongResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State []byte `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PongResp) Reset() {
	*x = PongResp{}
	mi := &file_pubsub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PongResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PongResp) ProtoMessage() {}

func (x *PongResp) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PongResp.ProtoReflect.Descriptor instead.
func (*PongResp) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{6}
}

func (x *PongResp) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

// *
// The definition of a message in Kafka with the current message
// offset, production timestamp, Key, and message content.
type KafkaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Key       []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KafkaMessage) Reset() {
	*x = KafkaMessage{}
	mi := &file_pubsub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaMessage) ProtoMessage() {}

func (x *KafkaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaMessage.ProtoReflect.Descriptor instead.
func (*KafkaMessage) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{7}
}

func (x *KafkaMessage) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *KafkaMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *KafkaMessage) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KafkaMessage) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// *
// The response of Fetch messages from Apache Kafka.
type KafkaFetchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*KafkaMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *KafkaFetchResp) Reset() {
	*x = KafkaFetchResp{}
	mi := &file_pubsub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaFetchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaFetchResp) ProtoMessage() {}

func (x *KafkaFetchResp) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaFetchResp.ProtoReflect.Descriptor instead.
func (*KafkaFetchResp) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{8}
}

func (x *KafkaFetchResp) GetMessages() []*KafkaMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

// *
// The response of list offset from Apache Kafka.
type KafkaListOffsetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *KafkaListOffsetResp) Reset() {
	*x = KafkaListOffsetResp{}
	mi := &file_pubsub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaListOffsetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaListOffsetResp) ProtoMessage() {}

func (x *KafkaListOffsetResp) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaListOffsetResp.ProtoReflect.Descriptor instead.
func (*KafkaListOffsetResp) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{9}
}

func (x *KafkaListOffsetResp) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// *
// Server response definition for pubsub scenarios
//
// The sequence field will be the same as the value in the
// request, which is used to associate the associated request
// and response.
//
// The resp field is the response data sent by the server, and
// its type will be chosen from any of the lists in the definition.
type PubSubResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Types that are assignable to Resp:
	//
	//	*PubSubResp_ErrorResp
	//	*PubSubResp_PongResp
	//	*PubSubResp_KafkaFetchResp
	//	*PubSubResp_KafkaListOffsetResp
	Resp isPubSubResp_Resp `protobuf_oneof:"resp"`
}

func (x *PubSubResp) Reset() {
	*x = PubSubResp{}
	mi := &file_pubsub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSubResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubResp) ProtoMessage() {}

func (x *PubSubResp) ProtoReflect() protoreflect.Message {
	mi := &file_pubsub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubResp.ProtoReflect.Descriptor instead.
func (*PubSubResp) Descriptor() ([]byte, []int) {
	return file_pubsub_proto_rawDescGZIP(), []int{10}
}

func (x *PubSubResp) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (m *PubSubResp) GetResp() isPubSubResp_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (x *PubSubResp) GetErrorResp() *ErrorResp {
	if x, ok := x.GetResp().(*PubSubResp_ErrorResp); ok {
		return x.ErrorResp
	}
	return nil
}

func (x *PubSubResp) GetPongResp() *PongResp {
	if x, ok := x.GetResp().(*PubSubResp_PongResp); ok {
		return x.PongResp
	}
	return nil
}

func (x *PubSubResp) GetKafkaFetchResp() *KafkaFetchResp {
	if x, ok := x.GetResp().(*PubSubResp_KafkaFetchResp); ok {
		return x.KafkaFetchResp
	}
	return nil
}

func (x *PubSubResp) GetKafkaListOffsetResp() *KafkaListOffsetResp {
	if x, ok := x.GetResp().(*PubSubResp_KafkaListOffsetResp); ok {
		return x.KafkaListOffsetResp
	}
	return nil
}

type isPubSubResp_Resp interface {
	isPubSubResp_Resp()
}

type PubSubResp_ErrorResp struct {
	ErrorResp *ErrorResp `protobuf:"bytes,31,opt,name=error_resp,json=errorResp,proto3,oneof"`
}

type PubSubResp_PongResp struct {
	PongResp *PongResp `protobuf:"bytes,32,opt,name=pong_resp,json=pongResp,proto3,oneof"`
}

type PubSubResp_KafkaFetchResp struct {
	KafkaFetchResp *KafkaFetchResp `protobuf:"bytes,33,opt,name=kafka_fetch_resp,json=kafkaFetchResp,proto3,oneof"`
}

type PubSubResp_KafkaListOffsetResp struct {
	KafkaListOffsetResp *KafkaListOffsetResp `protobuf:"bytes,34,opt,name=kafka_list_offset_resp,json=kafkaListOffsetResp,proto3,oneof"`
}

func (*PubSubResp_ErrorResp) isPubSubResp_Resp() {}

func (*PubSubResp_PongResp) isPubSubResp_Resp() {}

func (*PubSubResp_KafkaFetchResp) isPubSubResp_Resp() {}

func (*PubSubResp_KafkaListOffsetResp) isPubSubResp_Resp() {}

var File_pubsub_proto protoreflect.FileDescriptor

var file_pubsub_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f,
	0x0a, 0x07, 0x43, 0x6d, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x0a, 0x0a, 0x08, 0x43, 0x6d, 0x64, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x66, 0x0a, 0x12, 0x43,
	0x6d, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x5b, 0x0a, 0x0d, 0x43, 0x6d, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x83, 0x02, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x63, 0x6d,
	0x64, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x43, 0x6d, 0x64, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6d, 0x64, 0x50, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0f, 0x63,
	0x6d, 0x64, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6d, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x15, 0x63, 0x6d, 0x64, 0x5f, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6d, 0x64,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x22, 0x39, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x20, 0x0a, 0x08, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x6c, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3b, 0x0a, 0x0e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x2d,
	0x0a, 0x13, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x91, 0x02,
	0x0a, 0x0a, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x6f, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3b, 0x0a, 0x10, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x16,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x48, 0x00, 0x52, 0x13, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pubsub_proto_rawDescOnce sync.Once
	file_pubsub_proto_rawDescData = file_pubsub_proto_rawDesc
)

func file_pubsub_proto_rawDescGZIP() []byte {
	file_pubsub_proto_rawDescOnce.Do(func() {
		file_pubsub_proto_rawDescData = protoimpl.X.CompressGZIP(file_pubsub_proto_rawDescData)
	})
	return file_pubsub_proto_rawDescData
}

var file_pubsub_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pubsub_proto_goTypes = []any{
	(*CmdPing)(nil),             // 0: CmdPing
	(*CmdEmpty)(nil),            // 1: CmdEmpty
	(*CmdKafkaListOffset)(nil),  // 2: CmdKafkaListOffset
	(*CmdKafkaFetch)(nil),       // 3: CmdKafkaFetch
	(*PubSubReq)(nil),           // 4: PubSubReq
	(*ErrorResp)(nil),           // 5: ErrorResp
	(*PongResp)(nil),            // 6: PongResp
	(*KafkaMessage)(nil),        // 7: KafkaMessage
	(*KafkaFetchResp)(nil),      // 8: KafkaFetchResp
	(*KafkaListOffsetResp)(nil), // 9: KafkaListOffsetResp
	(*PubSubResp)(nil),          // 10: PubSubResp
}
var file_pubsub_proto_depIdxs = []int32{
	1, // 0: PubSubReq.cmd_empty:type_name -> CmdEmpty
	0, // 1: PubSubReq.cmd_ping:type_name -> CmdPing
	3, // 2: PubSubReq.cmd_kafka_fetch:type_name -> CmdKafkaFetch
	2, // 3: PubSubReq.cmd_kafka_list_offset:type_name -> CmdKafkaListOffset
	7, // 4: KafkaFetchResp.messages:type_name -> KafkaMessage
	5, // 5: PubSubResp.error_resp:type_name -> ErrorResp
	6, // 6: PubSubResp.pong_resp:type_name -> PongResp
	8, // 7: PubSubResp.kafka_fetch_resp:type_name -> KafkaFetchResp
	9, // 8: PubSubResp.kafka_list_offset_resp:type_name -> KafkaListOffsetResp
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_pubsub_proto_init() }
func file_pubsub_proto_init() {
	if File_pubsub_proto != nil {
		return
	}
	file_pubsub_proto_msgTypes[4].OneofWrappers = []any{
		(*PubSubReq_CmdEmpty)(nil),
		(*PubSubReq_CmdPing)(nil),
		(*PubSubReq_CmdKafkaFetch)(nil),
		(*PubSubReq_CmdKafkaListOffset)(nil),
	}
	file_pubsub_proto_msgTypes[10].OneofWrappers = []any{
		(*PubSubResp_ErrorResp)(nil),
		(*PubSubResp_PongResp)(nil),
		(*PubSubResp_KafkaFetchResp)(nil),
		(*PubSubResp_KafkaListOffsetResp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pubsub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pubsub_proto_goTypes,
		DependencyIndexes: file_pubsub_proto_depIdxs,
		MessageInfos:      file_pubsub_proto_msgTypes,
	}.Build()
	File_pubsub_proto = out.File
	file_pubsub_proto_rawDesc = nil
	file_pubsub_proto_goTypes = nil
	file_pubsub_proto_depIdxs = nil
}
